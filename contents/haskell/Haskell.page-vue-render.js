
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"fixed":""}},[_c('navbar',{attrs:{"type":"dark"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"https://se-education.org","title":"SE-EDU"}},[_c('span',[_c('span',{staticClass:"fas fa-chevron-circle-left",attrs:{"aria-hidden":"true"}}),_v(" "),_c('strong',[_c('strong',[_v("SE-EDU")])])])])]},proxy:true},{key:"right",fn:function(){return [_c('li',{staticClass:"nav-link"},[_c('form',{staticClass:"navbar-form"},[_c('searchbar',{attrs:{"data":searchData,"placeholder":"Search this site","on-hit":searchCallback,"menu-align-right":""}})],1)])]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/learningresources/index.html"}},[_c('span',[_c('strong',[_v("Home")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/learningresources/about.html"}},[_c('span',[_c('strong',[_v("About")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/learningresources/contributing.html"}},[_c('span',[_c('strong',[_v("Contributing")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://github.com/se-edu/learningresources"}},[_c('span',[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}})])])])])],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"site-nav","tag-name":"nav","to":"site-nav"}},[_c('div',{staticClass:"site-nav-top"},[_c('div',{staticClass:"font-weight-bold mb-2",staticStyle:{"font-size":"1.25rem"}},[_v("Table of contents")])]),_v(" "),_c('div',{staticClass:"nav-component slim-scroll"},[_c('site-nav',[_c('overlay-source',{staticClass:"site-nav-list site-nav-list-root",attrs:{"tag-name":"ul","to":"mb-site-nav"}},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_c('strong',[_v("Programming Languages")])]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("C++\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/c++/rvalue.html"}},[_v("Rvalue References and Move Semantics")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("CSharp\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/csharp/IntroductionToCSharp.html"}},[_v("Introduction to CSharp")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/csharp/CSAsyncAwait.html"}},[_v("Asynchronous Programming in C#")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/dart/Dart.html"}},[_v("Dart")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/elm/Elm.html"}},[_v("Elm")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/go/Go.html"}},[_v("Go")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/haskell/Haskell.html"}},[_v("Haskell")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Java\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/java/JavaConcurrency.html"}},[_v("Java Concurrency")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/java/streams-an-introduction.html"}},[_v("Java Streams")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/java/JavaSynchronization.html"}},[_v("Java Synchronization")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/java/JavaReflections.html"}},[_v("Java Reflection")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/java/JUnit.html"}},[_v("JUnit")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("JavaScript\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/javascript/WritingTestableJavascript.html"}},[_v("Writing Testable JavaScript Code")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/javascript/Javascript-promises.html"}},[_v("Javascript Promises")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/javascript/Javascript-modules.html"}},[_v("Javascript Modules")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/javascript/staticTypingInJavascript.html"}},[_v("Static Typing in JavaScript")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Kotlin\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/kotlin/kotlin.html"}},[_v("Introduction to Kotlin")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/kotlin/NullSafety.html"}},[_v("Null Safety In Kotlin")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Python\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/python/introduction-to-python.html"}},[_v("Introduction to Python")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/python/numpy.html"}},[_v("NumPy")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/ruby/Ruby.html"}},[_v("Ruby")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/rust/Rust.html"}},[_v("Rust")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/scala/Scala.html"}},[_v("Scala")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/swift/welcome-to-swift.html"}},[_v("Swift")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_c('strong',[_v("SE Topics")])]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Architecture\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/architecture/RESTArchitecturalStyle.html"}},[_v("REST")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Code Quality\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/codeQuality/CodeQualityMetrics.html"}},[_v("Code Quality Metrics")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/projectManagement/documentation.html"}},[_v("Documentation")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/functionalProgramming/intro.html"}},[_v("Functional Programming")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Performance\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/performance/Performance.html"}},[_v("Introduction to Performance Optimization")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/performance/PerformanceProfiling.html"}},[_v("Performance Profiling")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/performance/WebPerformance.html"}},[_v("Web Performance")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Project Management\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/projectManagement/AgileDevelopment.html"}},[_v("Agile Development")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/devops/DevOps.html"}},[_v("DevOps")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/projectManagement/githubActions.html"}},[_v("Github Actions")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Revision Control\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/revisionControl/bestPracticesGit.html"}},[_v("Best Practices with git")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/scalability/scalable-development.html"}},[_v("Scalability")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Static Analysis\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/staticAnalysis/intro.html"}},[_v("Introduction to Static Analysis")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/staticAnalysis/checkStyle.html"}},[_v("CheckStyle")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/staticAnalysis/PMD.html"}},[_v("PMD")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/staticAnalysis/FindBugs.html"}},[_v("FindBugs")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/staticAnalysis/ESLint.html"}},[_v("ESLint")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Testing\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/testing/integration-testing.html"}},[_v("Integration Testing")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/testing/security-testing.html"}},[_v("Security Testing")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/testing/testDrivenDevelopment.html"}},[_v("Test-Driven Development")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/testing/writing-testable-code.html"}},[_v("Writing Testable Code")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("UI/UX\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/uix/accessibility.html"}},[_v("Accessibility")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/uix/design-systems.html"}},[_v("Design Systems")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/uix/uix.html"}},[_v("Introduction to UI/UX")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/uix/refining-ux-skills.html"}},[_v("Refining UX Design Skills")])])])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_c('strong',[_v("App Frameworks")])]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/android/IntroToAndroid.html"}},[_v("Android")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/javascript/Javascript-framework-Angular.html"}},[_v("Angular")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/ios/IntroToIos.html"}},[_v("iOS")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/node/nodejs.html"}},[_v("Node")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/javascript/Javascript-framework-React.html"}},[_v("React")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/javascript/Javascript-framework-Redux.html"}},[_v("Redux")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/ruby/Rails.html"}},[_v("Ruby on Rails")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/java/Spring.html"}},[_v("Spring")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/javascript/Javascript-framework-VueJs.html"}},[_v("Vue")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/csharp/Xamarin.html"}},[_v("Xamarin")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_c('strong',[_v("Tools Useful for Software Engineers")])]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/regex/Regex.html"}},[_v("Regular Expressions")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/docker/Docker.html"}},[_v("Docker")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/zeromq/zeromq.html"}},[_v("ZeroMQ")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/dotfiles/Dotfiles.html"}},[_v("Dotfiles")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_c('strong',[_v("Other Topics")])]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/computerVision/cv.html"}},[_v("Computer Vision")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Databases\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/data/databases/databases.html"}},[_v("DBMS")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/data/sql/SQL.html"}},[_v("SQL")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/data/nosql/NoSQL.html"}},[_v("NoSQL")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/ai/ml.html"}},[_v("Machine Learning")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Multi-Threading\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/gpgpu/gpgpu.html"}},[_v("GPGPU")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/gpgpu/cuda.html"}},[_v("CUDA")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/naturalLanguage/nl.html"}},[_v("Natural Language Processing")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Security\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/security/crossSiteRequestForgery/crossSiteRequestForgery.html"}},[_v("Cross Site Request Forgery")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/security/crossSiteScripting/crossSiteScripting.html"}},[_v("Cross Site Scripting")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/security/cryptography.html"}},[_v("Cryptography")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/security/Https.html"}},[_v("HTTPS")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/security/passwordStorage.html"}},[_v("Password Storage")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/security/sqlInjection.html"}},[_v("SQL Injection")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_v("Shell\n\n"),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-2",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/learningresources/contents/shells/bash.html"}},[_v("bash")])])])])])])])])],1)],1)]),_v(" "),_c('div',{staticClass:"fixed-header-padding",attrs:{"id":"content-wrapper"}},[_m(0),_v(" "),_c('p'),_c('div',{staticClass:"website-content"},[_m(1),_v(" "),_c('p',[_v("Author: Thenaesh Elango")]),_v(" "),_c('box',{attrs:{"id":"article-toc"}},[_c('ul',[_c('li',[_c('a',{attrs:{"href":"#overview"}},[_v("Overview")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#getting-started"}},[_v("Getting Started")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"#installation"}},[_v("Installation")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"#system-wide-installation"}},[_v("System-Wide Installation")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#stack-installation"}},[_v("Stack Installation")])])])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#usage"}},[_v("Usage")])])])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#whirlwind-tour"}},[_v("Whirlwind Tour")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"#types"}},[_v("Types")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"#basic-types"}},[_v("Basic Types‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#functions-and-amp-currying"}},[_v("Functions & Currying‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#algebraic-data-types-and-amp-pattern-matching"}},[_v("Algebraic Data Types & Pattern Matching‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#type-parameters"}},[_v("Type Parameters‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#inductive-data-types"}},[_v("Inductive Data Types‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#further-reading"}},[_v("Further Reading‎")])])])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#general-functional-programming"}},[_v("General Functional Programming")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"#functions"}},[_v("Functions‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#recursion"}},[_v("Recursion‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#lists"}},[_v("Lists‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#list-processing-fold"}},[_v("List Processing - Fold‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#list-processing-map-and-amp-filter"}},[_v("List Processing - Map & Filter‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#programming-with-other-inductive-data-types"}},[_v("Programming with Other Inductive Data Types‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#further-reading-2"}},[_v("Further Reading‎")])])])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#typeclasses"}},[_v("Typeclasses")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"#defining-and-instantiating-typeclasses"}},[_v("Defining and Instantiating Typeclasses‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#adding-typeclass-constraints-to-functions"}},[_v("Adding Typeclass Constraints to Functions‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#instantiating-typeclasses-with-parameterized-type-constructors"}},[_v("Instantiating Typeclasses with Parameterized Type Constructors‎")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#further-reading-3"}},[_v("Further Reading‎")])])])])])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#common-haskell-idioms"}},[_v("Common Haskell Idioms")]),_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"#functors"}},[_v("Functors")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#applicative-functors"}},[_v("Applicative Functors")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#monads"}},[_v("Monads")])])])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"#guides"}},[_v("Guides")])])])]),_v(" "),_m(2),_v(" "),_c('p',[_v("Haskell is a purely functional programming language with strong, static,\ninferred typing.")]),_v(" "),_c('p',[_v("While Haskell has its roots in academia, its emphasis on purity and\nside-effect-free computation makes it a valuable asset in software engineering\ncontexts. Programs written in Haskell tend to be easy to test, refactor and\ndebug, with the compiler usually catching all bugs before the program can even\nbe compiled and run. Consequently, Haskell codebases are extraordinarily stable.")]),_v(" "),_m(3),_v(" "),_m(4),_m(5),_v(" "),_m(6),_v(" "),_m(7),_v(" "),_m(8),_v(" "),_m(9),_v(" "),_m(10),_v(" "),_m(11),_v(" "),_c('p',[_v("At the time of writing, the Haskell Platform has binaries available for all\ncommon operating systems, and many uncommon ones as well.")]),_v(" "),_m(12),_v(" "),_c('p',[_v("For Haskell projects of significant size, it may be necessary to control the\nexact versions of the compiler and libraries used. For such use cases, the\nsystem-wide installation method above may prove unwieldy and inadequate. In\ncases like these, it may be preferable to have an entire Haskell environment\njust for that project, together with a curated set of libraries.")]),_v(" "),_m(13),_v(" "),_c('p',[_v("A new Stack project may be created and set up with the following:")]),_v(" "),_m(14),_m(15),_v(" "),_m(16),_v(" "),_m(17),_v(" "),_m(18),_v(" "),_m(19),_v(" "),_m(20),_v(" "),_m(21),_v(" "),_m(22),_v(" "),_m(23),_v(" "),_m(24),_v(" "),_c('p',[_v("Haskell is statically typed, meaning that every variable binds to a value of a\nspecified type. Haskell is also strongly-typed, meaning that every value has a\nwell-defined type.")]),_v(" "),_m(25),_v(" "),_c('p',[_v("We specify types explicitly by postfixing the variable names with the type.")]),_v(" "),_m(26),_c('p',[_v("Haskell has very powerful type inference engine, so it is possible to omit the\ntype definitions in most cases.")]),_v(" "),_m(27),_m(28),_v(" "),_c('p',[_v("Functions, which are just values, have types too. It is considered good practice\nin Haskell to specify types for toplevel functions, as a form of documentation,\neven though the compiler is likely able to infer types.")]),_v(" "),_m(29),_m(30),_v(" "),_m(31),_v(" "),_m(32),_v(" "),_c('p',[_v("We may go even further with currying, by fixing some parameters in the function:")]),_v(" "),_m(33),_c('p',[_v("This clearly illustrates how currying can be used to reuse and partially\nspecialise code as needed. This idiom comes in handy very often in Haskell, as\nwill be seen later.")]),_v(" "),_m(34),_v(" "),_m(35),_v(" "),_c('p',[_v("It is possible to create custom data types, either from nothing or from\nexisting types.")]),_v(" "),_m(36),_m(37),_v(" "),_c('p',[_v("We make use of types in functions by pattern matching on the value constructors.\nIt is necessary to pattern match on all the value constructors; omitting any\nwill cause the compiler to complain of non-exhaustive pattern matches.")]),_v(" "),_m(38),_c('p',[_v("It is also possible to create data types that encapsulate/contain other data types.\nThe value constructors in this case take parameters instead of being bare.\nPattern matching is done by \"expanding\" the value constructor.")]),_v(" "),_m(39),_c('p',[_v("There is also an additional way to declare data types. Suppose we had a C++\nclass like so:")]),_v(" "),_m(40),_m(41),_v(" "),_m(42),_m(43),_v(" "),_m(44),_m(45),_v(" "),_m(46),_v(" "),_m(47),_v(" "),_m(48),_c('p',[_v("This ensures that division by zero returns a clearly-defined result instead\nof something weird.")]),_v(" "),_c('p',[_v("Now suppose we want to send a HTTP request and retrieve the response data.\nThis response data may not exist as the server may refuse to return the data.\nWe can try to solve the problem in the following manner:")]),_v(" "),_m(49),_m(50),_v(" "),_m(51),_v(" "),_c('p',[_v("We define the following abstraction of failing computations:")]),_v(" "),_m(52),_m(53),_v(" "),_m(54),_v(" "),_m(55),_v(" "),_m(56),_m(57),_v(" "),_m(58),_v(" "),_m(59),_v(" "),_c('p',[_v("We can define a data type in terms of itself. Consider, for instance, a tree.\nA tree can be thought of as either an empty tree, or a node with a left subtree\nand right subtree attached. We encode it like so:")]),_v(" "),_m(60),_c('p',[_v("Another classic inductive data type is the singly-linked list. The list is\neither an empty list or the first element together with the rest of the list.\nWhile not canonical, this is a very common representation of lists in the\nfunctional programming world:")]),_v(" "),_m(61),_c('p',[_v("This representation of lists is actually exactly how traditional lists are\ndefined in Haskell, just with different names and notation as will be seen later.")]),_v(" "),_c('p',[_v("We are now poised to enter the world of actual functional programming in Haskell.")]),_v(" "),_m(62),_v(" "),_m(63),_v(" "),_m(64),_v(" "),_m(65),_v(" "),_m(66),_v(" "),_m(67),_m(68),_v(" "),_c('p',[_v("Recursion is one of the fundamental themes of functional programming. It is the\nability of a function to call itself.")]),_v(" "),_m(69),_m(70),_v(" "),_m(71),_m(72),_v(" "),_m(73),_v(" "),_c('p',[_v("As described earlier, a list is an inductive data type, defined as either the\nempty list or an element concatenated with the rest of the list. The actual list\ndata type is")]),_v(" "),_m(74),_m(75),_v(" "),_m(76),_v(" "),_m(77),_v(" "),_m(78),_c('p',[_v("The last representation is most commonly used, while the second last is often\nused when pattern matching on lists. The rest are almost never seen in practice.\nHowever, it is hoped that this pedantic exercise helps the reader understand\nthe true nature of lists: an ordinary inductive data type with some compiler\nsyntactic sugar tacked on.")]),_v(" "),_m(79),_v(" "),_c('p',[_v("List processing is a very important part of elementary functional programming.\nThis is due to the fact that lists can store large amounts of data, and it is\nvery easy to define powerful abstractions to slice and dice that data in ways\ntypically unknown in imperative programming.")]),_v(" "),_c('p',[_v("One common idiom is to loop over a list and aggregate their values.")]),_v(" "),_c('p',[_v("It is possible to run over a list and sum their values recursively like so:")]),_v(" "),_m(80),_m(81),_v(" "),_m(82),_c('p',[_v("It is clear that some abstraction is in order here. The functions are almost\nidentical except for the aggregating function used and the initial value (0 for\nsum, 1 for product). We can write a generalised aggregating function:")]),_v(" "),_m(83),_m(84),_v(" "),_m(85),_m(86),_v(" "),_m(87),_v(" "),_c('p',[_v("One may wish to take in a list, transform every element in the list, and output\nthe resulting list. This is known as a map, and may be defined as:")]),_v(" "),_m(88),_m(89),_v(" "),_m(90),_c('p',[_v("One may also wish to remove certain elements, that fail some predicate, from a\ngiven list. This is known as a filter:")]),_v(" "),_m(91),_c('p',[_v("This example uses guard patterns. An example of using filter would be:")]),_v(" "),_m(92),_m(93),_v(" "),_m(94),_v(" "),_c('p',[_v("Recursion is a natural fit with inductive data types other than lists. One\nexample would be finding an element in a binary tree:")]),_v(" "),_m(95),_c('p',[_v("The above runs in O(log n) as long as the tree is balanced.")]),_v(" "),_m(96),_v(" "),_m(97),_v(" "),_m(98),_v(" "),_c('p',[_v("Typeclasses are essentially contracts/constraints imposed on types. They are\nsimilar to how Java interfaces are constraints imposed on Java classes. When\nused properly, they are an extremely powerful tool in helping to structure code.")]),_v(" "),_m(99),_v(" "),_m(100),_m(101),_v(" "),_m(102),_m(103),_v(" "),_c('p',[_v("Here's another example:")]),_v(" "),_m(104),_m(105),_v(" "),_m(106),_v(" "),_m(107),_m(108),_v(" "),_m(109),_m(110),_v(" "),_m(111),_m(112),_v(" "),_c('p',[_v("Consider the following function to check if the elements in the following list\nare all in ascending order:")]),_v(" "),_m(113),_m(114),_v(" "),_m(115),_m(116),_v(" "),_m(117),_m(118),_v(" "),_m(119),_v(" "),_m(120),_v(" "),_m(121),_m(122),_v(" "),_m(123),_m(124),_v(" "),_m(125),_v(" "),_m(126),_v(" "),_m(127),_v(" "),_m(128),_v(" "),_m(129),_v(" "),_m(130),_m(131),_v(" "),_m(132),_c('p',[_v("We can then map over values of any functor:")]),_v(" "),_m(133),_m(134),_v(" "),_m(135),_v(" "),_m(136),_v(" "),_m(137),_m(138),_v(" "),_c('p',[_v("Applicative functors allow a more general form of mapping, where it is possible\nto use an N-parameter function to map over N functors. To understand the value\nof this, consider the following code:")]),_v(" "),_m(139),_m(140),_v(" "),_m(141),_v(" "),_m(142),_v(" "),_c('p',[_v("No Haskell tutorial will be complete without an introduction to the fabled\nmonad. Monads have been described with various analogies, as well as with\nnotorious phrases from category theory like \"a monad is a monoid in the category\nof endofunctors\".")]),_v(" "),_c('p',[_v("None of these are useful for the software engineer, so we dispense with them and\nopt for just showing the code:")]),_v(" "),_m(143),_m(144),_v(" "),_m(145),_m(146),_v(" "),_m(147),_c('p',[_v("If the reader squints hard enough, this looks like an imperative program! It\nlooks like the following is being done:")]),_v(" "),_m(148),_m(149),_v(" "),_m(150),_v(" "),_c('p',[_v("Monads are a big topic, and additional resources are available:")]),_v(" "),_m(151),_v(" "),_m(152),_v(" "),_m(153)],1),_v(" "),_c('i',{staticClass:"fa fa-arrow-circle-up fa-lg d-print-none",attrs:{"id":"scroll-top-button","onclick":"handleScrollTop()","aria-hidden":"true"}}),_c('p')]),_v(" "),_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"},[_c('overlay-source',{staticClass:"nav nav-pills flex-column my-0 small no-flex-wrap",attrs:{"id":"mb-page-nav","tag-name":"nav","to":"mb-page-nav"}},[_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#introduction-to-haskell"}},[_v("Introduction to Haskell‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#overview"}},[_v("Overview‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#getting-started"}},[_v("Getting Started‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#installation"}},[_v("Installation‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#system-wide-installation"}},[_v("System-Wide Installation‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#stack-installation"}},[_v("Stack Installation‎")])]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#usage"}},[_v("Usage‎")])]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#whirlwind-tour"}},[_v("Whirlwind Tour‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#types"}},[_v("Types‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#basic-types"}},[_v("Basic Types‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#functions-and-amp-currying"}},[_v("Functions & Currying‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#algebraic-data-types-and-amp-pattern-matching"}},[_v("Algebraic Data Types & Pattern Matching‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#type-parameters"}},[_v("Type Parameters‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#inductive-data-types"}},[_v("Inductive Data Types‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#further-reading"}},[_v("Further Reading‎")])]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#general-functional-programming"}},[_v("General Functional Programming‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#functions"}},[_v("Functions‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#recursion"}},[_v("Recursion‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#lists"}},[_v("Lists‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#list-processing-fold"}},[_v("List Processing - Fold‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#list-processing-map-and-amp-filter"}},[_v("List Processing - Map & Filter‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#programming-with-other-inductive-data-types"}},[_v("Programming with Other Inductive Data Types‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#further-reading-2"}},[_v("Further Reading‎")])]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#typeclasses"}},[_v("Typeclasses‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#defining-and-instantiating-typeclasses"}},[_v("Defining and Instantiating Typeclasses‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#adding-typeclass-constraints-to-functions"}},[_v("Adding Typeclass Constraints to Functions‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#instantiating-typeclasses-with-parameterized-type-constructors"}},[_v("Instantiating Typeclasses With Parameterized Type Constructors‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#further-reading-3"}},[_v("Further Reading‎")])])]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#common-haskell-idioms"}},[_v("Common Haskell Idioms‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#functors"}},[_v("Functors‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#applicative-functors"}},[_v("Applicative Functors‎")]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#monads"}},[_v("Monads‎")])]),_v(" "),_c('a',{staticClass:"nav-link py-1",attrs:{"href":"#guides"}},[_v("Guides‎")])])],1)])],1),_v(" "),_m(154)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"a-student-s-guide-to-software-engineering-tools-and-amp-techniques"}},[_c('span',{staticClass:"anchor",attrs:{"id":"a-student-s-guide-to-software-engineering-tools-and-amp-techniques"}}),_c('span',{staticClass:"text-dark"},[_c('strong',[_c('strong',[_v("A Student's Guide to Software Engineering Tools & Techniques »")])])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#a-student-s-guide-to-software-engineering-tools-and-amp-techniques","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"introduction-to-haskell"}},[_c('span',{staticClass:"anchor",attrs:{"id":"introduction-to-haskell"}}),_v("Introduction to Haskell"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#introduction-to-haskell","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"overview"}},[_c('span',{staticClass:"anchor",attrs:{"id":"overview"}}),_v("Overview"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#overview","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("Here's an example of a Haskell program that reads a string of numbers, prints\nthe sum of the numbers and repeats the process until the string "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("\"quit\"")]),_v(" is\nentered. This shall serve as our Hello World.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- the entry point of the program")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("main")]),_v(" :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("IO")]),_v(" ()\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("main")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("do")]),_v("\n")]),_c('span',[_v("    str <- getLine\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("if")]),_v(" str == "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"quit\"")]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("then")]),_v(" return ()\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("else")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("do")]),_v("\n")]),_c('span',[_v("            "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("let")]),_v(" sumOfNumbers = sumAllNumbersInString str\n")]),_c('span',[_v("            putStrLn $ show sumOfNumbers\n")]),_c('span',[_v("            main\n")]),_c('span',[_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("sumAllNumbersInString")]),_v(" :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("sumAllNumbersInString")]),_v(" str = sumAll $ extractInts $ tokenize str\n")]),_c('span',[_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- sums up a list of integers using a higher-order function (the left fold)")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("sumAll")]),_v(" :: ["),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("] -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("sumAll")]),_v(" = foldl (+) "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- convert each string of digits in a list to an actual integer")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("extractInts")]),_v(" :: ["),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")]),_v("] -> ["),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("]\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("extractInts")]),_v(" = fmap read\n")]),_c('span',[_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- split string by spaces using a built-in function")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("tokenize")]),_v(" :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")]),_v(" -> ["),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")]),_v("]\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("tokenize")]),_v(" = words\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Haskell is widely used in a whole range of industries, including banks,\nfinancial companies, technology companies and engineering companies use Haskell\nin a variety of systems. A comprehensive list may be found\n"),_c('a',{attrs:{"href":"https://wiki.haskell.org/Haskell_in_industry"}},[_v("here")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"getting-started"}},[_c('span',{staticClass:"anchor",attrs:{"id":"getting-started"}}),_v("Getting Started"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#getting-started","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"installation"}},[_c('span',{staticClass:"anchor",attrs:{"id":"installation"}}),_v("Installation"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#installation","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("This tutorial, in general, assumes a "),_c('em',[_v("system-wide installation")]),_v(" of the Haskell\nPlatform.")]),_v(" This is primarily for simplicity. It is perfectly acceptable to write\nsmall programs or code not intended for production in this manner.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("When using Haskell in an actual project, however, it is "),_c('strong',[_v("strongly-recommended")]),_v("\nto use Stack. Not doing so may cause dependency management to become a nightmare.")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"system-wide-installation"}},[_c('span',{staticClass:"anchor",attrs:{"id":"system-wide-installation"}}),_v("System-Wide Installation"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#system-wide-installation","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("For new users, Haskell may be quickly and easily installed by downloading the\n"),_c('a',{attrs:{"href":"https://www.haskell.org/platform/"}},[_v("Haskell Platform")]),_v(" for their respective\noperating systems. The Haskell Platform contains many common and important\nHaskell libraries, in addition to the Glasgow Haskell Compiler (GHC).")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"stack-installation"}},[_c('span',{staticClass:"anchor",attrs:{"id":"stack-installation"}}),_v("Stack Installation"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#stack-installation","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("In such a scenario, "),_c('a',{attrs:{"href":"https://www.haskellstack.org"}},[_v("Stack")]),_v(" may come in handy.\nStack is a package manager of sorts for Haskell, similar to NPM. Installation\ninstructions may be found in the\n"),_c('a',{attrs:{"href":"https://docs.haskellstack.org/en/stable/README/"}},[_v("Stack Documentation")]),_v(", and is\nfairly standard.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs sh"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# create the project skeleton")]),_v("\n")]),_c('span',[_v("stack new "),_c('span',{pre:true,attrs:{"class":"hljs-variable"}},[_v("${PROJECT_NAME}")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# go into the project source directory")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-built_in"}},[_v("cd")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-variable"}},[_v("${PROJECT_NAME}")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# install GHC for the project")]),_v("\n")]),_c('span',[_v("stack setup\n")]),_c('span',[_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# compile the project")]),_v("\n")]),_c('span',[_v("stack build\n")]),_c('span',[_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# run the project executable")]),_v("\n")]),_c('span',[_v("stack "),_c('span',{pre:true,attrs:{"class":"hljs-built_in"}},[_v("exec")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-variable"}},[_v("${PROJECT_NAME}")]),_v("-exe\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The command "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("stack new")]),_v(" is used to create a new project, which contains a\nskeleton already set up. This skeleton includes a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("${PROJECT_NAME}.cabal")]),_v(" file,\nwhich contains nearly the entire configuration for the project (compiler/library\nversions, modules to be exposed, build targets, etc), and is best thought of as\na sort of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("package.json")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Gemfile")]),_v(" for Stack.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The command "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("stack setup")]),_v(" downloads and installs GHC. Stack installs GHC\nversions into an isolated location in a user's home directory, and does not add\nthem to the system path. The version used for any particular project depends on\nthe setting in the project's "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("${PROJECT_NAME}.cabal")]),_v(" file.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The commands "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("stack build")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("stack exec")]),_v(" are used to build and run the\nproject. The executable name for a project named Project is "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Project-exe")]),_v(". This\nname is configurable in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Project.cabal")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The rest of the Stack documentation may be found in the\n"),_c('a',{attrs:{"href":"https://docs.haskellstack.org/en/stable/GUIDE/"}},[_v("official guide")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"usage"}},[_c('span',{staticClass:"anchor",attrs:{"id":"usage"}}),_v("Usage"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#usage","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The command "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ghci")]),_v(" may be used to invoke the GHC interpreter. This launches an\n"),_c('a',{attrs:{"href":"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"}},[_v("REPL")]),_v(" where\nHaskell code can be entered and evaluated interactively. This is a very useful\ntool when first learning Haskell, and also when debugging code that fails to\ncompile.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The command "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ghc")]),_v(" may be used to compile Haskell code down to machine code. The\ninvocation of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ghc")]),_v(" is very similar to that of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("gcc")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_v("When using Stack, simply prefix the commands with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("stack")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"whirlwind-tour"}},[_c('span',{staticClass:"anchor",attrs:{"id":"whirlwind-tour"}}),_v("Whirlwind Tour"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#whirlwind-tour","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"types"}},[_c('span',{staticClass:"anchor",attrs:{"id":"types"}}),_v("Types"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#types","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"basic-types"}},[_c('span',{staticClass:"anchor",attrs:{"id":"basic-types"}}),_v("Basic Types"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#basic-types","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    a :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("\n")]),_c('span',[_v("    a = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- unbounded integer type, similar to Java BigInt")]),_v("\n")]),_c('span',[_v("    b :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Integer")]),_v("\n")]),_c('span',[_v("    b = product ["),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1.")]),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v(".1000")]),_v("] "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- this is the factorial of 1000")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    pi :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    pi = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3.141592654")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    a = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"functions-and-amp-currying"}},[_c('span',{staticClass:"anchor",attrs:{"id":"functions-and-amp-currying"}}),_v("Functions & Currying"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#functions-and-amp-currying","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- input:      x of type Double")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- output: x * x of type Double")]),_v("\n")]),_c('span',[_v("    square :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    square x = x * x\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- computes the hypotenuse of a right triangle given the other two sides")]),_v("\n")]),_c('span',[_v("    hypotenuse :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    hypotenuse adj opp = sqrt (square adj + square opp)\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("If the above syntax is confusing and the comments insufficient, the reader may\nwish to consult the detailed introduction to Haskell syntax\n"),_c('a',{attrs:{"href":"http://learnyouahaskell.com/starting-out"}},[_v("here")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The type definition for "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("square")]),_v(" is rather obvious. But the type definition of\n"),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("hypotenuse")]),_v(" is a little strange. One would expect "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(Double, Double) -> Double)")]),_v("\ninstead of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Double -> Double -> Double")]),_v(". The reason is that functions in Haskell\nare "),_c('a',{attrs:{"href":"https://en.wikipedia.org/wiki/Currying"}},[_v("curried")]),_v(", so a two-parameter\nfunction can be called with a single argument, with a one-parameter function\n(that takes in the remaining argument and produces the value) being returned.\n"),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(Double, Double) -> Double")]),_v(" is actually a function that takes in a "),_c('em',[_v("single")]),_v("\n2-tuple parameter, which is different from a function that takes in two parameters.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("->")]),_v(" binds to the right, so "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Double -> Double -> Double")]),_v(" may be written as\n"),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Double -> (Double -> Double)")]),_v(" ("),_c('em',[_v("a function that takes a double and\nreturns a function that takes a double and returns a double")]),_v(").\nCalling "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("hypotenuse 3 4")]),_v(" is also the same as calling "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(hypotenuse 3) 4")]),_v(",\nas function application binds to the left.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- hypotenuse of a right triangle whose adjacent side is restricted to 3")]),_v("\n")]),_c('span',[_v("    hypotenuseWithAdjacent3 :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    hypotenuseWithAdjacent3 = hypotenuse "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("It may be of interest to note that "),_c('strong',[_v("all")]),_v(" functions in Haskell take in at most\none parameter. The illusion of multi-parameter functions is created by currying\nand left-binding function calls.")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"algebraic-data-types-and-amp-pattern-matching"}},[_c('span',{staticClass:"anchor",attrs:{"id":"algebraic-data-types-and-amp-pattern-matching"}}),_v("Algebraic Data Types & Pattern Matching"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#algebraic-data-types-and-amp-pattern-matching","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("TrafficSignal")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Red")]),_v(" | "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Amber")]),_v(" | "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Green")])]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- define some values of type TrafficSignal, all type-inferred")]),_v("\n")]),_c('span',[_v("    redLight = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Red")]),_v("\n")]),_c('span',[_v("    amberLight = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Amber")]),_v("\n")]),_c('span',[_v("    greenLight = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Green")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("TrafficSignal")]),_v(" type is an example of creating data types from nothing.\nWe call "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Red")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Amber")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Green")]),_v(" the value constructors and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("TrafficSignal")]),_v("\nitself the type constructor. In this case, a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("TrafficSignal")]),_v(" has 3 possible\nvalues, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Red")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Amber")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Green")]),_v(".\n"),_c('strong',[_v("Both type and value constructors must start with a capital letter.")])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    makeTrafficDecision :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("TrafficSignal")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- leaving any of these out will cause the compiler to complain")]),_v("\n")]),_c('span',[_v("    makeTrafficDecision "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Red")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"Stop\"")]),_v("\n")]),_c('span',[_v("    makeTrafficDecision "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Amber")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"Carefully Proceed\"")]),_v("\n")]),_c('span',[_v("    makeTrafficDecision "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Green")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"Go\"")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("HttpRequest")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Get")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")]),_v(" | "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Post")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")])]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    handleRequest :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("HttpRequest")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- the ++ denotes string concatenation in this context")]),_v("\n")]),_c('span',[_v("    handleRequest ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Get")]),_v(" string) = "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"Get request performed on \"")]),_v(" ++ string\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- we use _ to denote that we don't care about the actual value")]),_v("\n")]),_c('span',[_v("    handleRequest ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Post")]),_v(" _) = "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"Post request not supported\"")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs cpp"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("// we are omitting trivial details like constructors")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("class")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("Box")]),_v(" {")]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("double")]),_v(" length;\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("double")]),_v(" breadth;\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("double")]),_v(" height;\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("double")]),_v(" density;\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("public")]),_v(":\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-function"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("double")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("getVolume")]),_c('span',{pre:true,attrs:{"class":"hljs-params"}},[_v("()")]),_v(" ")]),_v("{\n")]),_c('span',[_v("            "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("return")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("this")]),_v("->length * "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("this")]),_v("->breadth * "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("this")]),_v("->height;\n")]),_c('span',[_v("        }\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-function"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("double")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("getMass")]),_c('span',{pre:true,attrs:{"class":"hljs-params"}},[_v("()")]),_v(" ")]),_v("{\n")]),_c('span',[_v("            "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("return")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("this")]),_v("->density * "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("this")]),_v("->"),_c('span',{pre:true,attrs:{"class":"hljs-built_in"}},[_v("getVolume")]),_v("();\n")]),_c('span',[_v("        }\n")]),_c('span',[_v("    };\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("We could certainly represent a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Box")]),_v(" as an algebraic data type as follows:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- "),_c('span',{pre:true,attrs:{"class":"hljs-doctag"}},[_v("NOTE:")]),_v(" a value constructor can have the same name as the type constructor")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Box")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Box")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")])]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("But we are missing key information here. Which "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Double")]),_v(" stands for which\nattribute? In situations like these, we can use Haskell's record syntax:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- define box as a record type")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Box")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Box")]),_v(" { "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("length")]),_v(" :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(", "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("breadth")]),_v(" :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(", "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("height")]),_v(" :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(", "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("density")]),_v(" :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" }")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    getVolume :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Box")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    getVolume ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Box")]),_v(" { length = l, breadth = b, height = h }) = l * b * h\n")]),_c('span',[_v("\n")]),_c('span',[_v("    getMass :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Box")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    getMass box = getVolume box * density box\n")]),_c('span',[_v("\n")]),_c('span',[_v("    silverBox = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Box")]),_v(" { length = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v(", breadth = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("10")]),_v(", height = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("15")]),_v(", density = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("10.5")]),_v(" }\n")]),_c('span',[_v("    goldBox = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Box")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("10")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("15")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("19.3")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- we can still use normal construction by parameter order")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("There are a few things to note here, other than the syntax itself. When pattern\nmatching on a record type, we may omit any parameters we do not need (we do not\neven need to specify "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("_")]),_v("). We may also extract values from the record type by\ntreating the record parameter names as functions from the record type to the\nparameter type. For instance, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("density")]),_v(" in the above example is actually a\n"),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Box -> Double")]),_v(" function. Doing "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("density silverBox")]),_v(" will give the value "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("10.5")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"type-parameters"}},[_c('span',{staticClass:"anchor",attrs:{"id":"type-parameters"}}),_v("Type Parameters"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#type-parameters","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("Consider the division operator on "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Double")]),_v(". We may be tempted to define it with\nthe type "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Double -> Double -> Double")]),_v(", but the result may be undefined when\ndividing by zero. Here's a first stab at a solution to remedy this:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- represents a value that may or may not exist")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("MaybeDouble")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Undefined")]),_v(" | "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Defined")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")])]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    divide :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("MaybeDouble")]),_v("\n")]),_c('span',[_v("    divide _ "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Undefined")]),_v("\n")]),_c('span',[_v("    divide x y = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Defined")]),_v(" (x / y)\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("MaybeResponse")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("NoResponse")]),_v(" | "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("GotResponse")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("HttpResponse")])]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    makeRequest :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("HttpRequest")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("MaybeResponse")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- implementation details irrelevant")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("We have "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("MaybeDouble")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("MaybeResponse")]),_v(", both of which have a common pattern:\nthey represent possible failure of computation. Naturally, we may wish to abstract\nthis out. But all the means of abstraction available to us thus far cannot be\nused, as we wish to abstract on "),_c('em',[_v("types")]),_v(" rather than values.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("For this purpose, Haskell supports "),_c('em',[_v("type parameters")]),_v(", much like how C++ has\ntemplates and Java has generics.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Maybe")]),_v(" t = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v(" | "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" t")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    divide :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Maybe")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    divide _ "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v("\n")]),_c('span',[_v("    divide x y = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" (x / y)\n")]),_c('span',[_v("\n")]),_c('span',[_v("    makeRequest :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("HttpRequest")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Maybe")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Response")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- implementation details irrelevant")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Note that we introduce an additional parameter "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("t")]),_v(" on the left side of the definition.\nThis is known as a type parameter, and "),_c('strong',[_v("must always be lowercase")]),_v(". This parameter\ncan then be used in the value constructors as a placeholder for any type that\nshould be there.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The use of type parameters in this way is similar to the use of generics in Java.\nWe may think of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Maybe t")]),_v(" as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Optional<T>")]),_v(", if that helps to understand the role\nof "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("t")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_v("Note that there can be more than one type parameter. An example is "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Either")]),_v(",\nwhich represents the result of a computation that returns values of different\ntypes on success or failure:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Either")]),_v(" a b = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Left")]),_v(" a | "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Right")]),_v(" b")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    divide :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Either")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    divide _ "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Left")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"Attempt to divide by zero!\"")]),_v("\n")]),_c('span',[_v("    divide x y = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Right")]),_v(" (x / y)\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Type constructors can be curried just like regular functions or value constructors.\nTherefore, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Either String Double")]),_v(" is a concrete type, while "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Either String")]),_v(" is\na type constructor that takes in the remaining type.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Maybe")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Either")]),_v(" are both defined in the Haskell prelude library.")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"inductive-data-types"}},[_c('span',{staticClass:"anchor",attrs:{"id":"inductive-data-types"}}),_v("Inductive Data Types"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#inductive-data-types","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Tree")]),_v(" t = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(" | "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" t ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Tree")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("t")]),_v(") ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Tree")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("t")]),_v(")")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("    data List t = EmptyList | Element t (List t)\n")])])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"further-reading"}},[_c('span',{staticClass:"anchor",attrs:{"id":"further-reading"}}),_v("Further Reading"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#further-reading","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('a',{attrs:{"href":"https://en.wikibooks.org/wiki/Haskell/Type_declarations"}},[_v("Type Declarations")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://en.wikibooks.org/wiki/Haskell/Pattern_matching"}},[_v("Pattern Matching")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://en.wikibooks.org/wiki/Haskell/More_on_datatypes"}},[_v("More on Datatypes")])])])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"general-functional-programming"}},[_c('span',{staticClass:"anchor",attrs:{"id":"general-functional-programming"}}),_v("General Functional Programming"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#general-functional-programming","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"functions"}},[_c('span',{staticClass:"anchor",attrs:{"id":"functions"}}),_v("Functions"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#functions","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("A function may be defined in one of several ways. We illustrate the various\nsyntaxes for defining a function below, with more details\n"),_c('a',{attrs:{"href":"http://learnyouahaskell.com/syntax-in-functions"}},[_v("here")]),_v(" if needed:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    sumOfSquares :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- standard definition")]),_v("\n")]),_c('span',[_v("    sumOfSquares x y  = (x * x) + (y * y)\n")]),_c('span',[_v("     "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- lambda function")]),_v("\n")]),_c('span',[_v("    sumOfSquares = \\x y -> (x * x) + (y * y)\n")]),_c('span',[_v("\n")]),_c('span',[_v("    fizzBuzz :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Either")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("String")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- the horrible, disgusting, but still perfectly correct way")]),_v("\n")]),_c('span',[_v("    fizzBuzz x = "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("case")]),_v(" x `mod` "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("15")]),_v(" == "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("of")]),_v("\n")]),_c('span',[_v("                    "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("True")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Left")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"fizzbuzz\"")]),_v("\n")]),_c('span',[_v("                    "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("False")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("case")]),_v(" x `mod` "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v(" == "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("of")]),_v("\n")]),_c('span',[_v("                        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("True")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Left")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"fizz\"")]),_v("\n")]),_c('span',[_v("                        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("False")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("case")]),_v(" x `mod` "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v(" == "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("of")]),_v("\n")]),_c('span',[_v("                            "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("True")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Left")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"buzz\"")]),_v("\n")]),_c('span',[_v("                            "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("False")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Right")]),_v(" x\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- far more elegant way using guard patterns")]),_v("\n")]),_c('span',[_v("    fizzBuzz x\n")]),_c('span',[_v("        | x `mod` "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("15")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Left")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"fizzbuzz\"")]),_v("\n")]),_c('span',[_v("        | x `mod` "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Left")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"fizz\"")]),_v("\n")]),_c('span',[_v("        | x `mod` "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Left")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"buzz\"")]),_v("\n")]),_c('span',[_v("        | otherwise = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Right")]),_v(" x\n")])])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"recursion"}},[_c('span',{staticClass:"anchor",attrs:{"id":"recursion"}}),_v("Recursion"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#recursion","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- Time: O(n)")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- Space: O(n)")]),_v("\n")]),_c('span',[_v("    factorial :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Integer")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Integer")]),_v("\n")]),_c('span',[_v("    factorial "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v("\n")]),_c('span',[_v("    factorial n = n * factorial (n - "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(")\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- Time: O(2^n)")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- Space: O(n), may vary due to lazy evaluation")]),_v("\n")]),_c('span',[_v("    fibonacci :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Integer")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Integer")]),_v("\n")]),_c('span',[_v("    fibonacci "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v("\n")]),_c('span',[_v("    fibonacci "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v("\n")]),_c('span',[_v("    fibonacci n = fibonacci (n - "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(") + fibonacci (n - "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(")\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("While Haskell has no primitive loop structures, looping can be simulated by\nrecursion. While attempting this in languages in C may cause a stack overflow,\nHaskell avoids this via "),_c('a',{attrs:{"href":"https://en.wikipedia.org/wiki/Tail_call"}},[_v("tail-call optimisation")]),_v(",\nwhich can be applied to recursive calls that meet certain requirements.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs Haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- Time: O(n)")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- Space: O(1)")]),_v("\n")]),_c('span',[_v("    factorial :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Integer")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Integer")]),_v("\n")]),_c('span',[_v("    factorial = factorial' "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")]),_v("\n")]),_c('span',[_v("        factorial' p "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" = p\n")]),_c('span',[_v("        factorial' p n = factorial' (p * n) (n - "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(")\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- Time: O(n)")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- Space: O(1)")]),_v("\n")]),_c('span',[_v("    fibonacci :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Integer")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Integer")]),_v("\n")]),_c('span',[_v("    fibonacci "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v("\n")]),_c('span',[_v("    fibonacci "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v("\n")]),_c('span',[_v("    fibonacci n = fibonacci' "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" n "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")]),_v("\n")]),_c('span',[_v("        fibonacci a _ "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(" = a\n")]),_c('span',[_v("        fibonacci' a b n = fibonacci' b (a + b) (n - "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(")\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("We can safely omit the types in the inner function definitions due to type\ninference. Also note how we freely use currying in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("factorial")]),_v(" definition.")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"lists"}},[_c('span',{staticClass:"anchor",attrs:{"id":"lists"}}),_v("Lists"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#lists","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("data")]),_v(" [] t = [] | (:) t ([] "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("t")]),_v(")")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("where "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(":")]),_v(" is an infix value constructor.")])}
},function anonymous(
) {
with(this){return _c('blockquote',[_c('p',[_c('strong',[_v("IMPORTANT: Infix Functions")])]),_v(" "),_c('p',[_v("Any function (a value constructor is really just a function) that takes in two parameters\nwhose name consists of nothing but symbols is infix by default.")]),_v(" "),_c('p',[_v("An infix function like "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("+")]),_v(" may be used in prefix form by enclosing in parentheses.\nFor instance, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("1 + 1")]),_v(" is the same as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(+) 1 1")]),_v("."),_c('br'),_v("\nIn the type definition, the prefix form must be used i.e. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(+) :: Int -> Int -> Int")]),_v("."),_c('br'),_v("\nIn the function definition, either is acceptable.")]),_v(" "),_c('p',[_c('a',{attrs:{"href":"https://wiki.haskell.org/Infix_operator"}},[_v("Find out more.")])]),_v(" "),_c('p',[_v("We will use this concept freely from now on.")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Here are several ways to define a list "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("xs :: [Int]")]),_v(" containing 2,4,6,8 in that order:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- the crazy way, using prefix notation directly from the list definition")]),_v("\n")]),_c('span',[_v("    xs = (:) "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(" ((:) "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(" ((:) "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("6")]),_v(" ((:) "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("8")]),_v(" [])))\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- using infix syntax for (:), still annoying to write")]),_v("\n")]),_c('span',[_v("    xs = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(":("),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(":("),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("6")]),_v(":("),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("8")]),_v(":[])))\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- taking advantage of binding rules for (:), noiseless and easier to understand at a glance")]),_v("\n")]),_c('span',[_v("    xs = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(":"),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(":"),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("6")]),_v(":"),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("8")]),_v(":[]\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- using varying amounts of list syntactic sugar provided by the compiler")]),_v("\n")]),_c('span',[_v("    xs = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(":"),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(":"),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("6")]),_v(":["),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("8")]),_v("]\n")]),_c('span',[_v("    xs = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(":"),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(":["),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("6")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("8")]),_v("]\n")]),_c('span',[_v("    xs = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(":["),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("6")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("8")]),_v("]\n")]),_c('span',[_v("    xs = ["),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("6")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("8")]),_v("]\n")])])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"list-processing-fold"}},[_c('span',{staticClass:"anchor",attrs:{"id":"list-processing-fold"}}),_v("List Processing - Fold"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#list-processing-fold","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    sumList :: ["),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("] -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("\n")]),_c('span',[_v("    sumList [] = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v("\n")]),_c('span',[_v("    sumList (x:xs) = x + sumList xs\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Note the infix pattern match "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(x:xs)")]),_v(" as opposed to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("((:) x xs)")]),_v(". What if we wish\nto take the product of the elements instead of a sum? Then we would write:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    prodList :: ["),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("] -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("\n")]),_c('span',[_v("    prodList [] = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v("\n")]),_c('span',[_v("    prodList (x:xs) = x * prodList xs\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- 1st parameter is the aggregating function (e.g. (+) or (*))")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- 2nd parameter is the initial value")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- 3rd parameter is the list to aggregate")]),_v("\n")]),_c('span',[_v("    aggregate :: ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v(") -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v(" -> ["),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("] -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("\n")]),_c('span',[_v("    aggregate _ initial [] = initial\n")]),_c('span',[_v("    aggregate op initial (x:xs) = op x (aggregate op initial xs)\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("This is better, but perhaps we could generalise this even further beyond "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Int")]),_v(".\nWe then arrive at the following, by simply changing the type signature:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- 1st parameter is the aggregating function (e.g. (+) or (*))")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- 2nd parameter is the initial value")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- 3rd parameter is the list to aggregate")]),_v("\n")]),_c('span',[_v("    aggregate :: (a -> b -> b) -> b -> [a] -> b\n")]),_c('span',[_v("    aggregate _ initial [] = initial\n")]),_c('span',[_v("    aggregate op initial (x:xs) = op x (aggregate op initial xs)\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("This function is known as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("foldl")]),_v(" in the Haskell prelude library, and there is\nalso a variant called "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("foldr")]),_v(" that does the aggregation from the right instead.")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"list-processing-map-and-amp-filter"}},[_c('span',{staticClass:"anchor",attrs:{"id":"list-processing-map-and-amp-filter"}}),_v("List Processing - Map & Filter"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#list-processing-map-and-amp-filter","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    map :: (a -> b) -> [a] -> [b]\n")]),_c('span',[_v("    map _ [] = []\n")]),_c('span',[_v("    map f (x:xs) = (f x):(map f xs)\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The type definition itself contains a wealth of information. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("map")]),_v(" function\ntakes in a \"transformer\", the list to be transformed, and return the transformed\nlist. An example of its usage would be:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- xs is [1,4,9,16]")]),_v("\n")]),_c('span',[_v("    xs = map (\\x -> x * x) ["),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v("]\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    filter :: (t -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v(") -> [t] -> [t]\n")]),_c('span',[_v("    filter _ [] = []\n")]),_c('span',[_v("    filter predicate (x:xs)\n")]),_c('span',[_v("        | predicate x == "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("True")]),_v(" = x:xs\n")]),_c('span',[_v("        | otherwise = xs\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- xs is [2,4]")]),_v("\n")]),_c('span',[_v("    xs = filter (\\x -> x `mod` "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(" == "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v(") ["),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v("]\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("It is left as an exercise for the reader to implement "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("map")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("filter")]),_v("\nin terms of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("foldl")]),_v(" (or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("aggregate")]),_v(" as defined above, which is the same).")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"programming-with-other-inductive-data-types"}},[_c('span',{staticClass:"anchor",attrs:{"id":"programming-with-other-inductive-data-types"}}),_v("Programming with Other Inductive Data Types"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#programming-with-other-inductive-data-types","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    find :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Tree")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v("\n")]),_c('span',[_v("    find "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(" _ = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("False")]),_v("\n")]),_c('span',[_v("    find ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" x left right) target\n")]),_c('span',[_v("        | x == target = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("True")]),_v("\n")]),_c('span',[_v("        | x < target = find left target\n")]),_c('span',[_v("        | x > target = find right target\n")])])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"further-reading-2"}},[_c('span',{staticClass:"anchor",attrs:{"id":"further-reading-2"}}),_v("Further Reading"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#further-reading-2","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('a',{attrs:{"href":"http://learnyouahaskell.com/syntax-in-functions"}},[_v("Function Syntax")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"http://learnyouahaskell.com/higher-order-functions"}},[_v("Higher-Order Functions")])])])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"typeclasses"}},[_c('span',{staticClass:"anchor",attrs:{"id":"typeclasses"}}),_v("Typeclasses"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#typeclasses","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"defining-and-instantiating-typeclasses"}},[_c('span',{staticClass:"anchor",attrs:{"id":"defining-and-instantiating-typeclasses"}}),_v("Defining and Instantiating Typeclasses"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#defining-and-instantiating-typeclasses","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- \"class\" here has nothing to do with OOP")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("class")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Eq")]),_v(" t "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        (==) :: t -> t -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v("\n")]),_c('span',[_v("        (!==) :: t -> t -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- this ensures that we don't have to define (!==) separately")]),_v("\n")]),_c('span',[_v("        a != b = not (a == b)\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("We have just defined a typeclass called "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Eq")]),_v(". As its name probably suggests,\nthis typeclass is used when we wish to define the meaning of equality on types.\nWe then "),_c('em',[_v("instantiate")]),_v(" the typeclass with the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("TrafficSignal")]),_v(" type, like so:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Eq")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("TrafficSignal")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- note that these are infix function DEFINITIONS")]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- we can define infix operators directly in infix notation")]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Red")]),_v(" == "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Red")]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Amber")]),_v(" == "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Amber")]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Green")]),_v(" == "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Green")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("We have thus defined "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(==)")]),_v(" completely for "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("TrafficSignal")]),_v(". Note that "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(!=)")]),_v("\nnow comes for free, since we have defined it in terms of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(==)")]),_v(" in the typeclass\nitself.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Eq")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("List")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("t")]),_v(") "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyList")]),_v(" == "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyList")]),_v("\n")]),_c('span',[_v("        ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Element")]),_v(" x xs) == ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Element")]),_v(" y ys) = (x == y) && (xs == ys)\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Here, we define the equality of a list in terms of its underlying elements.\nThis seems reasonable. However, running this program will give an error. This\nis because we are attempting to compare the underlying elements (of type "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("t")]),_v(")\nusing "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(==)")]),_v(", which is not guaranteed to be defined on "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("t")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The solution, in this case, is to enforce a typeclass constraint prerequisite\non "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("t")]),_v(" by writing:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Eq")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("t")]),_v(") => "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Eq")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("List")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("t")]),_v(") "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- as before")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Here is an example of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Eq")]),_v(" being defined on "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tree")]),_v("s:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Eq")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("t")]),_v(") => "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Eq")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Tree")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("t")]),_v(") "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(" == "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v("\n")]),_c('span',[_v("        ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" x left right) == ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" x' left' right') = (x == x') && (left == left') && (right == right')\n")]),_c('span',[_v("\n")]),_c('span',[_v("    tree1 = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(") ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(")\n")]),_c('span',[_v("    tree2 = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(") "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v("\n")]),_c('span',[_v("    tree3 = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(") "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- some experiments")]),_v("\n")]),_c('span',[_v("    tree1 == tree2 "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- False")]),_v("\n")]),_c('span',[_v("    tree2 == tree3 "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- True")]),_v("\n")]),_c('span',[_v("    tree3 != tree1 "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- True")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("We present another common typeclass called "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Ord")]),_v(", which defines order for a type:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- anything that instantiates Ord must also instantiate Eq")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- this makes the typeclass definitions simpler as (==) is already provided and can be used")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("class")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Eq")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("t")]),_v(") => "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Ord")]),_v(" t "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- the only one we actually need to implement when instantiating")]),_v("\n")]),_c('span',[_v("        (<) :: t -> t -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- we predefine these and can then get them all for free")]),_v("\n")]),_c('span',[_v("        (>) :: t -> t -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v("\n")]),_c('span',[_v("        a > b = not ((a < b) || (a == b))\n")]),_c('span',[_v("\n")]),_c('span',[_v("        (<=) :: t -> t -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v("\n")]),_c('span',[_v("        a <= b == (a < b) || (a == b)\n")]),_c('span',[_v("\n")]),_c('span',[_v("        (>=) :: t -> t -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v("\n")]),_c('span',[_v("        a >= b = not (a < b)\n")])])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"adding-typeclass-constraints-to-functions"}},[_c('span',{staticClass:"anchor",attrs:{"id":"adding-typeclass-constraints-to-functions"}}),_v("Adding Typeclass Constraints to Functions"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#adding-typeclass-constraints-to-functions","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    isAscending :: [t] -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v("\n")]),_c('span',[_v("    isAscending [] = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("True")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- handle 0-element lists")]),_v("\n")]),_c('span',[_v("    isAscending (x:[]) = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("True")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- handle 1-element lists")]),_v("\n")]),_c('span',[_v("    isAscending (x:y:xs) = (x < y) && isAscending (y:xs) "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- recursive case")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("This function seems reasonable, except for one minor detail: we (and the compiler)\nare not sure if "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("t")]),_v(" can be compared using "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(<)")]),_v("!. To remedy this, we need to\nexplicitly state that "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("t")]),_v(" instantiates "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Ord")]),_v(", thereby allowing the use of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(<)")]),_v(".\nWe do this by adding the constraint in the function type definition:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    isAscending :: ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Ord")]),_v(" t) => [t] -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Bool")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("We can now try out the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("isAscending")]),_v(" function:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    isAscending ["),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v("] "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- False")]),_v("\n")]),_c('span',[_v("    isAscending ["),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(","),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v("] "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- True")]),_v("\n")]),_c('span',[_v("    isAscending [] "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- True")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"instantiating-typeclasses-with-parameterized-type-constructors"}},[_c('span',{staticClass:"anchor",attrs:{"id":"instantiating-typeclasses-with-parameterized-type-constructors"}}),_v("Instantiating Typeclasses With Parameterized Type Constructors"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#instantiating-typeclasses-with-parameterized-type-constructors","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("Up to this point, we have been instantiating typeclasses with concrete types,\nsuch as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("TrafficSignal")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tree t")]),_v(". It is also possible to instantiate\ntypeclasses with "),_c('strong',[_v("parameterized")]),_v(" type constructors like "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tree")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("List")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_v("Consider the following typeclass "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Container")]),_v(" that is instantiated by types that\nhave some notion of constituent elements and size. For instance, a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("List")]),_v(" has a\nlength and contains elements of some type. A "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tree")]),_v(" has nodes and a size (number\nof nodes). The length is independent of type of element contained within.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("class")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Container")]),_v(" s "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- t is an arbitrary unconstrained type")]),_v("\n")]),_c('span',[_v("        size :: s t -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Int")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("We can instantiate "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Container")]),_v(" with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tree")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("List")]),_v(". These are parameterized\ntype constructors, not concrete types. We can even instantiate with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Maybe")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Container")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Tree")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        size "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v("\n")]),_c('span',[_v("        size ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" _ left right) = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" + size left + size right\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}}),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Container")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("List")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        size "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyList")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v("\n")]),_c('span',[_v("        size ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Element")]),_v(" _ restOfList) = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" + size restOfList\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}}),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Container")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Maybe")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        size "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("0")]),_v("\n")]),_c('span',[_v("        size ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" _) = "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("As an exercise, the reader may wish to redefine the size of a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tree")]),_v(" to mean\n\"height of tree\" rather than \"number of nodes\". It is necessary to instantiate\n"),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Container")]),_v(" with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tree")]),_v(" differently to achieve this. The function\n"),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("max :: (Ord a) => a -> a -> a")]),_v(" may come in handy ("),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Int")]),_v(" is an instance of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Ord")]),_v(").")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"further-reading-3"}},[_c('span',{staticClass:"anchor",attrs:{"id":"further-reading-3"}}),_v("Further Reading"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#further-reading-3","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('a',{attrs:{"href":"http://learnyouahaskell.com/making-our-own-types-and-typeclasses"}},[_v("More on Creating Typeclasses")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://wiki.haskell.org/Typeclassopedia"}},[_v("Collection and Relationship between Standard Typeclasses")])])])}
},function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"common-haskell-idioms"}},[_c('span',{staticClass:"anchor",attrs:{"id":"common-haskell-idioms"}}),_v("Common Haskell Idioms"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#common-haskell-idioms","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"functors"}},[_c('span',{staticClass:"anchor",attrs:{"id":"functors"}}),_v("Functors"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#functors","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("Consider the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("map")]),_v(" function previously defined. The type\nof "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("map")]),_v(" is "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("(a -> b) -> [a] -> [b]")]),_v(", which means that it operates only on lists.\nWe may imagine extending maps to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tree")]),_v("s and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Maybe")]),_v("s in the following manner:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    map :: (a -> b) -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Tree")]),_v(" a -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Tree")]),_v(" b\n")]),_c('span',[_v("    map :: (a -> b) -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Maybe")]),_v(" a -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Maybe")]),_v(" b\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The two type definitions above look very similar and suggest a generalization:\ntypes that can be mapped over. We call such types "),_c('em',[_v("functors")]),_v(", and can represent\ntheir behaviour with a typeclass.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("class")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Functor")]),_v(" f "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- f is a type constructor that takes in one type parameter")]),_v("\n")]),_c('span',[_v("        fmap :: (a -> b) -> f a -> f b\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}}),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}}),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Functor")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Tree")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        fmap _ "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v("\n")]),_c('span',[_v("        fmap f ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" x left right) = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" (f x) (fmap f left) (fmap f right)\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}}),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Functor")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Maybe")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        fmap _ "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v("\n")]),_c('span',[_v("        fmap f ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" x) = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" (f x)\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    sq x = x * x\n")]),_c('span',[_v("\n")]),_c('span',[_v("    fmap sq ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v(") "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- returns Just 25")]),_v("\n")]),_c('span',[_v("    fmap sq "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- returns Nothing")]),_v("\n")]),_c('span',[_v("\n")]),_c('span',[_v("    fmap sq ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(") ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Node")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("4")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v(") "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("EmptyTree")]),_v("))\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- returns (Node 1 (Node 4 EmptyTree) (Node 9 (Node 16 EmptyTree) EmptyTree))")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("More information about functors, including the functor laws,\nmay be found "),_c('a',{attrs:{"href":"https://en.wikibooks.org/wiki/Haskell/The_Functor_class"}},[_v("here")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"applicative-functors"}},[_c('span',{staticClass:"anchor",attrs:{"id":"applicative-functors"}}),_v("Applicative Functors"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#applicative-functors","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("An "),_c('em',[_v("applicative functor")]),_v(" is a functor that allows for a more advanced type of\nmapping. We shall jump straight into the (abridged) typeclass definition and the\nexample of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Maybe")]),_v(" as an applicative functor:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("class")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Functor")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("f")]),_v(") => "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Applicative")]),_v(" f "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        pure :: a -> f a\n")]),_c('span',[_v("        (<*>) :: f (a -> b) -> f a -> f b "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- generalized map function")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}}),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Applicative")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Maybe")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        pure x = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" x\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v(" <*> _ = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v("\n")]),_c('span',[_v("        _ <*> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v(" = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" f <*> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" x = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" (f x)\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Applicative functors have the concept of "),_c('em',[_v("lifting")]),_v(", embodied in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("pure")]),_v(", where\na value is taken and placed in the context of a functor. For instance, in the\ncontext of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Maybe")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("pure 5")]),_v(" returns the value\n"),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Just 5")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    euclideanDistance :: "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v(" -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Double")]),_v("\n")]),_c('span',[_v("    euclideanDistance x y z = sqrt ((x * x) + (y * y) + (z * z))\n")]),_c('span',[_v("\n")]),_c('span',[_v("    (pure euclideanDistance) <*> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("1")]),_v(" <*> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("2")]),_v(" <*> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("3")]),_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- returns Just 3.7416573867739413")]),_v("\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The above code can be written with just "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fmap")]),_v(" in the ordinary "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Functor")]),_v(" class,\nbut will involve incredible contortions.")])}
},function anonymous(
) {
with(this){return _c('p',[_v("More information about applicative functors can be found\n"),_c('a',{attrs:{"href":"https://en.wikibooks.org/wiki/Haskell/Applicative_functors"}},[_v("here")]),_v(". There is a\nlot of additional functionality available in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Applicative")]),_v(" typeclass. We\nhave barely scratched the surface.")])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"monads"}},[_c('span',{staticClass:"anchor",attrs:{"id":"monads"}}),_v("Monads"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#monads","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("class")]),_v(" ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Applicative")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-title"}},[_v("m")]),_v(") => "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Monad")]),_v(" m "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- this function, called \"bind\", is at the heart of the monad")]),_v("\n")]),_c('span',[_v("        (>>=) :: m a -> (a -> m b) -> m b\n")]),_c('span',[_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- we could actually just use pure, but return is here for historical reasons")]),_v("\n")]),_c('span',[_v("        return :: a -> m a\n")]),_c('span',[_v("        return = pure\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("A monad is essentially an applicative functor that allows for operations to be\nchained together with a value carried in the background. To consider this, let\nus consider the familiar case of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Maybe")]),_v(", which is a monad.")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-class"}},[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("instance")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Monad")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Maybe")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("where")])]),_v("\n")]),_c('span',[_v("        "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v(" >>= _ = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Nothing")]),_v("\n")]),_c('span',[_v("        ("),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" x) >>= f = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" (f x)\n")]),_c('span',[_v("\n")]),_c('span',[_v("    "),_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("-- maybeSomeValue is Just 50")]),_v("\n")]),_c('span',[_v("    maybeSomeValue = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v(" >>= (\\x -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" (x * x) >>= (\\x -> "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" (x + x)))\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Essentially, the bind function allows for values carried inside the monad (which\nis ultimately just a functor) to be extracted and passed into another computation.\nThis explanation may seem obtuse, but consider the same code, with some extracted\nwhitespace added and the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("return")]),_v(" function used:")])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    maybeSomeValue = "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v(" >>= (\\x ->\n")]),_c('span',[_v("                     "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" (x * x) >>= (\\x ->\n")]),_c('span',[_v("                     return (x + x)))\n")])])])}
},function anonymous(
) {
with(this){return _c('pre',[_c('code',{pre:true,attrs:{"class":"hljs haskell"}},[_c('span',[_v("    maybeSomeValue = "),_c('span',{pre:true,attrs:{"class":"hljs-keyword"}},[_v("do")]),_v("\n")]),_c('span',[_v("        x <- "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" "),_c('span',{pre:true,attrs:{"class":"hljs-number"}},[_v("5")]),_v("\n")]),_c('span',[_v("        x <- "),_c('span',{pre:true,attrs:{"class":"hljs-type"}},[_v("Just")]),_v(" (x * x)\n")]),_c('span',[_v("        return (x + x)\n")])])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The result of the imperative-looking code is exactly the same as that of the\noriginal computation, if traced through. Using monads to provide an imperative\ninterface in a functional program is such a common pattern that the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("do")]),_v(" notation\nwas conceived as syntactic sugar to make writing such a pattern easier. That means\nthat the imperative-looking code is actually valid Haskell!")])}
},function anonymous(
) {
with(this){return _c('p',[_v("In addition to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Maybe")]),_v(", there are several other monads. A major example is the\nIO monad, which allows external state to be encapsulated in the monad an interfaced\nwith in a manner familiar to imperative programmers.")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('a',{attrs:{"href":"http://learnyouahaskell.com/a-fistful-of-monads"}},[_v("Monads")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://en.wikibooks.org/wiki/Haskell/Understanding_monads#Monad_Laws"}},[_v("Monad Laws")]),_v(" that every monad should obey")]),_v(" "),_c('li',[_c('a',{attrs:{"href":"http://learnyouahaskell.com/input-and-output"}},[_v("IO Monad")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://en.wikibooks.org/wiki/Haskell/Understanding_monads/State"}},[_v("State Monad")]),_v(", allows state to be carried in a monadic context, allowing imperative-style computation")]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://en.wikibooks.org/wiki/Haskell/Mutable_objects"}},[_v("ST Monad")]),_v(", allows mutable state to be carried in a monadic context, useful for implementing inherently destructive algorithms")]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://wiki.haskell.org/Arrays"}},[_v("Arrays")]),_v(", allows constant-time access to elements like a C array, with mutable variants in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("IO")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ST")]),_v(" monads provided")])])}
},function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"guides"}},[_c('span',{staticClass:"anchor",attrs:{"id":"guides"}}),_v("Guides"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#guides","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('a',{attrs:{"href":"http://learnyouahaskell.com"}},[_v("Learn You a Haskell")]),_v(" is a good beginner text\nfor learning Haskell. It does not have much real-world examples, but does quite\na good job in explaining difficult theoretical concepts (e.g. functors,\napplicative functors and monads) well. It is recommended to read  the material\nin 4 chunks:\n"),_c('ul',[_c('li',[_v("1-6: basic functional programming")]),_v(" "),_c('li',[_v("7: modules (very important for large codebases)")]),_v(" "),_c('li',[_v("8-10: details of the type-system")]),_v(" "),_c('li',[_v("11-14: monads")])])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"http://book.realworldhaskell.org/"}},[_v("Real World Haskell")]),_v(" is a rather old text\nwhich is possibly outdated. Still, it shows plenty of examples of how Haskell\nmay be used in actual real-life scenarios (databases, web programming, etc).")]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://en.wikibooks.org/wiki/Haskell"}},[_v("Haskell Wikibook")]),_v(" is a comprehensive\nHaskell reference. This resource really shines when it comes to aggregating and\ncovering advanced Haskell topics that typically appear elsewhere in a very\nad-hoc fashion.")]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://wiki.haskell.org/Typeclassopedia"}},[_v("Typeclassopedia")]),_v(" is a reference\nfor the major typeclasses contained in the Haskell hierarchical libraries. Use\nit to determine which typeclasses are related to which (e.g. every monad is an\napplicative functor, which is in turn a functor).")])])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('small',[_v("[Powered by "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"30"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 3.0.4")]),_v(" on Tue, 13 Jul 2021, 18:39:25 UTC]")])])])}
}];
  